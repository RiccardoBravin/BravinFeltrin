title charging process

actor eMSP user
participant appMainActivity
participant appChargingActivity
participant appNotificationService
participant eMSP_notificationService
participant chargingColumn_API
participant Switcher_API
participant payment_API
participant CPMS_chargingService
participant BatteryPack_API
participant Reservations_DBMS_API


eMSP user->appMainActivity:open APP
activate appMainActivity
appMainActivity->appChargingActivity:startChargingActivity

activate appChargingActivity

alt NFC
eMSP user->appChargingActivity:nfcToken
else manualToken
eMSP user->appChargingActivity:manualToken
end
appChargingActivity->appChargingActivity:parseToken()

alt validToken
	activate CPMS_chargingService
 	appChargingActivity->CPMS_chargingService:checkReservation(token)
    CPMS_chargingService->Reservations_DBMS_API:find(reservation)
    activate Reservations_DBMS_API
    alt validReservation
    	linear 
    	Reservations_DBMS_API-->CPMS_chargingService:OK
        deactivate Reservations_DBMS_API
        CPMS_chargingService-->appChargingActivity:OK
        appChargingActivity-->eMSP user:startingChargeProecess
        CPMS_chargingService->chargingColumn_API:isSocketPlugged()
                activate chargingColumn_API
        eMSP user->chargingColumn_API:plugCar(socket)
		linear off
        chargingColumn_API-->CPMS_chargingService:vehiclePlugged(chargeLevel, socket)	
        linear on
		CPMS_chargingService->BatteryPack_API:getEnergyValue()
		activate BatteryPack_API
		BatteryPack_API-->CPMS_chargingService:storedValue
		deactivate BatteryPack_API

		alt stored price lower than current one
			CPMS_chargingService->Switcher_API:startBaterySupply()
			activate Switcher_API
			Switcher_API-->CPMS_chargingService:OK
			deactivate Switcher_API
		else 
			CPMS_chargingService->Switcher_API:startDSOSupply()
			activate Switcher_API
			Switcher_API-->CPMS_chargingService:OK
			deactivate Switcher_API
		end
        
        activate CPMS_chargingService
        space
        deactivate CPMS_chargingService
        loop until full charge or timeout, every minute
        CPMS_chargingService->>chargingColumn_API:getChargingStatus(socket)
        chargingColumn_API-->CPMS_chargingService:chargeLevel
        end
        alt fullCharge or time-frame out
        	CPMS_chargingService->Switcher_API:stopSupply(column, socket)
        	activate Switcher_API
        	Switcher_API-->CPMS_chargingService:OK
        	deactivate Switcher_API
        	CPMS_chargingService->eMSP_notificationService:chargeCompleted(token)
        	activate eMSP_notificationService
        	eMSP_notificationService-->CPMS_chargingService:received
        	activate appNotificationService
			loop every minute, until chargeOut notification is received
            appNotificationService->>eMSP_notificationService:getNotifications(user)
	        eMSP_notificationService-->appNotificationService:Notifications
            end
            space 
            deactivate eMSP_notificationService
            
    	    appNotificationService->eMSP user:Notify charge completed
           
           
            space
            deactivate appNotificationService
            CPMS_chargingService->chargingColumn_API:isSocketUnplugged(socket)
        	eMSP user->chargingColumn_API:unplugCar
            
linear off
chargingColumn_API-->CPMS_chargingService:vehicleUnplugged
            #COlumn api non fa richiesta diretta a cpms ma dopo aver fermato la ricarica questo aspetta che l'user disconnetta il plug, poi prepara il conto
            deactivate chargingColumn_API
            activate eMSP_notificationService
            CPMS_chargingService->eMSP_notificationService:finalBilling(token,total)
            activate appNotificationService
            eMSP_notificationService-->CPMS_chargingService:received
            deactivate CPMS_chargingService
            loop every minute, until totalBill notification is received
			appNotificationService->>eMSP_notificationService:getNotifications(user)
	        eMSP_notificationService-->appNotificationService:Notifications
			end
            appNotificationService->appChargingActivity:setBill(total)
            
            
            appChargingActivity->payment_API:pay(info,bill)
            activate payment_API
            payment_API-->appChargingActivity:done
			deactivate payment_API
            appChargingActivity-->eMSP user:paymentDone
            
            deactivate appChargingActivity
          
        end
       
    else Reservation not found
    	
        activate appChargingActivity 
        activate Reservations_DBMS_API
        activate CPMS_chargingService
    	Reservations_DBMS_API-->CPMS_chargingService:fail
        
        deactivate Reservations_DBMS_API
        CPMS_chargingService-->appChargingActivity:fail
        deactivate CPMS_chargingService
        appChargingActivity-->eMSP user:fail
        deactivate appChargingActivity
    end
else invalidToken
	activate appChargingActivity 
	appChargingActivity-->eMSP user:tokenFail
    deactivate appChargingActivity
end

