title charging process

actor eMSP user
participant appMainActivity
participant appChargingActivity
participant appNotificationService
participant eMSP_notificationService
participant chargingColumn_API
participant Switcher_API
participant payment_API
participant CPMS_chargingService
participant BatteryPack_API
database Reservations_DBMS_API


eMSP user->appMainActivity:clickChargeButton
activate appMainActivity
appMainActivity->appChargingActivity:startChargingActivity
deactivate appMainActivity
activate appChargingActivity
appChargingActivity->appChargingActivity:selectReservation
alt NFC
eMSP user->appChargingActivity:nfcToken
else manualToken
eMSP user->appChargingActivity:manualToken
end
appChargingActivity->appChargingActivity:parseToken

alt validToken
	activate CPMS_chargingService
 	appChargingActivity->CPMS_chargingService:checkReservation(user)
    CPMS_chargingService->Reservations_DBMS_API:find(query)
    activate Reservations_DBMS_API
    alt validReservation
    	linear 
    	Reservations_DBMS_API-->CPMS_chargingService:OK
        deactivate Reservations_DBMS_API
        CPMS_chargingService-->appChargingActivity:OK
        appChargingActivity-->eMSP user:startingChargeProecess
        CPMS_chargingService->chargingColumn_API:isPlugged
                activate chargingColumn_API
        eMSP user->chargingColumn_API:plugCar(socket)
		linear off
        chargingColumn_API-->>CPMS_chargingService:carPlugged(chargeLevel, socket)	
        linear on
		CPMS_chargingService->BatteryPack_API:getStoredPrice
		activate BatteryPack_API
		BatteryPack_API-->CPMS_chargingService:storedPrice
		deactivate BatteryPack_API

		alt stored price lower than current one
			CPMS_chargingService->Switcher_API:startSupplyWithBattery
			activate Switcher_API
			Switcher_API-->CPMS_chargingService:OK
			deactivate Switcher_API
		else 
			CPMS_chargingService->Switcher_API:startSupplyWithDSO
			activate Switcher_API
			Switcher_API-->CPMS_chargingService:OK
			deactivate Switcher_API
		end
        
        activate CPMS_chargingService
        space
        deactivate CPMS_chargingService
        loop until full charge or timeout
        CPMS_chargingService->>chargingColumn_API:levelCheck
        chargingColumn_API-->CPMS_chargingService:chargingLevel
        end
        alt fullCharge or time-frame out
        	CPMS_chargingService->Switcher_API:stopSupplying(column, socket)
        	activate Switcher_API
        	Switcher_API-->CPMS_chargingService:OK
        	deactivate Switcher_API
        	CPMS_chargingService->eMSP_notificationService:chargeOut
        	activate eMSP_notificationService
        	eMSP_notificationService-->CPMS_chargingService:received
        	activate appNotificationService
			appNotificationService->>eMSP_notificationService: periodicNotificationCheck
	        eMSP_notificationService-->appNotificationService:chargeOut
            space 
            deactivate eMSP_notificationService
    	    appNotificationService->eMSP user:chargeOut
            space
            deactivate appNotificationService
            
        	eMSP user->chargingColumn_API:unplugCar
            chargingColumn_API->CPMS_chargingService:carUnplugged
            #COlumn api non fa richiesta diretta a cpms ma dopo aver fermato la ricarica questo aspetta che l'user disconnetta il plug, poi prepara il conto
            deactivate chargingColumn_API
            CPMS_chargingService->appChargingActivity:totalBill
            #CPMS CANNOT MAKE REQUEST DIRECTLY TO APP
            # puoi fare che dopo essere stato avvisato che il tempo è scaduto chiede per il totale 
            #che poi in realtà NON ci tenevamo direttamente il max prima della prenotazione e poi andavamo a rimborsare il rimanente??
            appChargingActivity->payment_API:requestPayment(amount, beneficiary)
            activate payment_API
            payment_API-->appChargingActivity:done
			deactivate payment_API
            appChargingActivity-->eMSP user:paymentDone
            appChargingActivity-->CPMS_chargingService:paymentDone
            deactivate CPMS_chargingService
            deactivate appChargingActivity
          
        end
       
    else Reservation not found
    	
        activate appChargingActivity 
        activate Reservations_DBMS_API
    	Reservations_DBMS_API-->CPMS_chargingService:fail
        deactivate Reservations_DBMS_API
        CPMS_chargingService-->appChargingActivity:fail
        appChargingActivity-->eMSP user:fail
        deactivate appChargingActivity
    end
else invalidToken
	activate appChargingActivity 
	appChargingActivity-->eMSP user:tokenFail
    deactivate appChargingActivity
end

